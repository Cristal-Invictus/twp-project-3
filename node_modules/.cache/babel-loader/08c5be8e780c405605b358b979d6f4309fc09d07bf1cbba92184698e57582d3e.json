{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport postService from '../services/postService.js';\nimport commentService from '../services/commentService.js';\nimport Swal from 'sweetalert2';\nexport default {\n  name: 'CardDetails',\n  props: {\n    isVisible: {\n      type: Boolean,\n      default: false\n    },\n    task: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    categoryName: {\n      type: String,\n      default: 'Catégorie inconnue'\n    }\n  },\n  data() {\n    return {\n      editingTitle: false,\n      editingDescription: false,\n      editedTitle: '',\n      editedDescription: '',\n      currentStatus: 'todo',\n      comments: [],\n      newComment: '',\n      loadingComments: false\n    };\n  },\n  computed: {\n    statusIcon() {\n      const icons = {\n        todo: 'fas fa-inbox',\n        'in-progress': 'fas fa-clock',\n        completed: 'fas fa-check-circle'\n      };\n      return icons[this.currentStatus] || 'fas fa-inbox';\n    }\n  },\n  watch: {\n    isVisible: {\n      immediate: true,\n      handler(v) {\n        if (v && this.task) this.initializeCard();\n      }\n    },\n    task: {\n      immediate: true,\n      handler(n) {\n        if (n && this.isVisible) this.initializeCard();\n      }\n    }\n  },\n  methods: {\n    initializeCard() {\n      if (!this.task) return;\n      this.editedTitle = this.task.title?.rendered || '';\n      this.editedDescription = (this.task.content?.rendered || '').replace(/<[^>]*>/g, '');\n      this.currentStatus = this.getTaskStatus(this.task);\n      this.loadComments();\n    },\n    getTaskStatus(post) {\n      if (post.meta && post.meta.task_status) return post.meta.task_status;\n      if (post.status === 'draft') return 'todo';\n      if (post.status === 'pending') return 'in-progress';\n      if (post.status === 'publish') return 'completed';\n      return 'todo';\n    },\n    startEditingTitle() {\n      this.editingTitle = true;\n      this.$nextTick(() => {\n        this.$refs.titleInput.focus();\n        this.$refs.titleInput.select();\n      });\n    },\n    async saveTitle() {\n      if (!this.task) return;\n      if (this.editedTitle.trim() && this.editedTitle !== this.task.title.rendered) {\n        try {\n          await postService.update(this.task.id, {\n            title: this.editedTitle.trim()\n          });\n          this.$emit('task-updated', {\n            ...this.task,\n            title: {\n              rendered: this.editedTitle.trim()\n            }\n          });\n        } catch (e) {\n          console.error('Erreur titre:', e);\n          Swal.fire('Erreur', 'Impossible de mettre à jour le titre', 'error');\n        }\n      }\n      this.editingTitle = false;\n    },\n    cancelTitleEdit() {\n      this.editedTitle = this.task?.title?.rendered || '';\n      this.editingTitle = false;\n    },\n    startEditingDescription() {\n      this.editingDescription = true;\n      this.$nextTick(() => {\n        this.$refs.descriptionTextarea.focus();\n      });\n    },\n    async saveDescription() {\n      if (!this.task) return;\n      try {\n        const up = await postService.update(this.task.id, {\n          content: this.editedDescription.trim()\n        });\n        this.$emit('task-updated', up.data);\n      } catch (e) {\n        console.error('Erreur description:', e);\n        Swal.fire('Erreur', 'Impossible de mettre à jour la description', 'error');\n      }\n      this.editingDescription = false;\n    },\n    cancelDescriptionEdit() {\n      this.editedDescription = this.task?.content?.rendered ? this.task.content.rendered.replace(/<[^>]*>/g, '') : '';\n      this.editingDescription = false;\n    },\n    async updateStatus() {\n      if (!this.task) return;\n      try {\n        await postService.update(this.task.id, {\n          meta: {\n            task_status: this.currentStatus\n          }\n        });\n        this.$emit('status-changed', this.currentStatus);\n      } catch (e) {\n        console.error('Erreur statut:', e);\n        Swal.fire('Erreur', 'Impossible de mettre à jour le statut', 'error');\n      }\n    },\n    async loadComments() {\n      if (!this.task) return;\n      this.loadingComments = true;\n      try {\n        const r = await commentService.getAll(this.task.id);\n        this.comments = r.success ? r.data : [];\n      } catch (e) {\n        console.error('Erreur chargement commentaires:', e);\n      } finally {\n        this.loadingComments = false;\n      }\n    },\n    async addComment() {\n      if (!this.newComment.trim() || !this.task) return;\n      try {\n        const r = await commentService.create({\n          post: this.task.id,\n          content: this.newComment.trim()\n        });\n        if (r.success) {\n          this.comments.push(r.data);\n          this.newComment = '';\n        } else throw new Error(r.error?.message || 'Ajout impossible');\n      } catch (e) {\n        console.error('Erreur ajout commentaire:', e);\n        Swal.fire('Erreur', \"Impossible d'ajouter le commentaire\", 'error');\n      }\n    },\n    async deleteComment(id) {\n      const res = await Swal.fire({\n        title: 'Supprimer ce commentaire?',\n        text: 'Cette action ne peut pas être annulée',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#d33',\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: 'Supprimer',\n        cancelButtonText: 'Annuler'\n      });\n      if (res.isConfirmed) {\n        try {\n          const r = await commentService.delete(id);\n          if (r.success) this.comments = this.comments.filter(c => c.id !== id);else throw new Error(r.error?.message || 'Suppression impossible');\n        } catch (e) {\n          console.error('Erreur suppression commentaire:', e);\n          Swal.fire('Erreur', 'Impossible de supprimer le commentaire', 'error');\n        }\n      }\n    },\n    startEditingComment(c) {\n      c.editedContent = c.content.rendered.replace(/<[^>]*>/g, '');\n      c.isEditing = true;\n      this.$forceUpdate();\n    },\n    async saveCommentEdit(c) {\n      if (!c.editedContent.trim()) {\n        Swal.fire('Erreur', 'Le commentaire ne peut pas être vide', 'warning');\n        return;\n      }\n      try {\n        const r = await commentService.update(c.id, {\n          content: c.editedContent\n        });\n        if (r.success) {\n          c.content.rendered = r.data.content.rendered;\n          c.isEditing = false;\n          delete c.editedContent;\n          this.$forceUpdate();\n          Swal.fire({\n            title: 'Modifié !',\n            text: 'Commentaire mis à jour',\n            icon: 'success',\n            timer: 2000,\n            showConfirmButton: false\n          });\n        } else throw new Error(r.error?.message || 'Modification impossible');\n      } catch (e) {\n        console.error('Erreur modif commentaire:', e);\n        Swal.fire('Erreur', 'Impossible de modifier le commentaire', 'error');\n      }\n    },\n    cancelCommentEdit(c) {\n      c.isEditing = false;\n      delete c.editedContent;\n      this.$forceUpdate();\n    },\n    async deleteTask() {\n      const res = await Swal.fire({\n        title: 'Supprimer cette tâche?',\n        text: 'Cette action supprimera la tâche et tous ses commentaires',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#d33',\n        cancelButtonColor: '#3085d6',\n        confirmButtonText: 'Supprimer définitivement',\n        cancelButtonText: 'Annuler'\n      });\n      if (res.isConfirmed) {\n        try {\n          const r = await postService.delete(this.task.id);\n          if (r.success) {\n            this.$emit('task-deleted', this.task.id);\n            this.closeModal();\n          } else throw new Error(r.error?.message || 'Suppression impossible');\n        } catch (e) {\n          console.error('Erreur suppression tâche:', e);\n          Swal.fire('Erreur', 'Impossible de supprimer la tâche', 'error');\n        }\n      }\n    },\n    closeModal() {\n      this.$emit('closeModal');\n    },\n    formatDate(d) {\n      const date = new Date(d);\n      return date.toLocaleDateString('fr-FR', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n};","map":{"version":3,"names":["postService","commentService","Swal","name","props","isVisible","type","Boolean","default","task","Object","required","categoryName","String","data","editingTitle","editingDescription","editedTitle","editedDescription","currentStatus","comments","newComment","loadingComments","computed","statusIcon","icons","todo","completed","watch","immediate","handler","v","initializeCard","n","methods","title","rendered","content","replace","getTaskStatus","loadComments","post","meta","task_status","status","startEditingTitle","$nextTick","$refs","titleInput","focus","select","saveTitle","trim","update","id","$emit","e","console","error","fire","cancelTitleEdit","startEditingDescription","descriptionTextarea","saveDescription","up","cancelDescriptionEdit","updateStatus","r","getAll","success","addComment","create","push","Error","message","deleteComment","res","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","delete","filter","c","startEditingComment","editedContent","isEditing","$forceUpdate","saveCommentEdit","timer","showConfirmButton","cancelCommentEdit","deleteTask","closeModal","formatDate","d","date","Date","toLocaleDateString","day","month","year","hour","minute"],"sources":["/Users/akoyessoucristal/Rendu/C-DEV-121-COT-1-1-twp-cristal.akoyessou/src/components/CardDetails.vue"],"sourcesContent":["<template>\n  <div v-if=\"isVisible\" @click.self=\"closeModal\" class=\"fixed inset-0 z-[1000] flex items-center justify-center bg-black/70 p-4\">\n    <div class=\"relative w-full max-w-4xl max-h-[90vh] flex flex-col bg-white rounded-2xl shadow-2xl overflow-hidden animate-scaleIn\">\n      <!-- Header -->\n      <div class=\"flex flex-col lg:flex-row gap-6 p-8 border-b border-gray-200\">\n        <div class=\"flex flex-1 gap-5\">\n          <div :class=\"['w-14 h-14 rounded-full flex items-center justify-center text-xl text-white shrink-0', currentStatus==='todo' ? 'bg-blue-500' : currentStatus==='in-progress' ? 'bg-amber-500' : 'bg-green-600']\">\n            <i :class=\"statusIcon\"></i>\n          </div>\n          <div class=\"flex-1\">\n            <h2 v-if=\"!editingTitle && task\" @click=\"startEditingTitle\" class=\"text-2xl font-semibold text-slate-800 mb-2 cursor-text hover:bg-slate-100 px-1 rounded transition\">{{ task && task.title ? task.title.rendered : '' }}</h2>\n            <input v-else v-model=\"editedTitle\" @blur=\"saveTitle\" @keyup.enter=\"saveTitle\" @keyup.esc=\"cancelTitleEdit\" ref=\"titleInput\" class=\"w-full text-2xl font-semibold text-slate-800 border-2 border-indigo-400 rounded px-3 py-1 mb-2 focus:outline-none focus:border-indigo-500\" />\n            <div class=\"flex flex-wrap gap-6 text-sm text-slate-500\">\n              <span class=\"flex items-center gap-1\"><i class=\"fas fa-folder text-indigo-500 text-xs\"></i>{{ categoryName }}</span>\n              <span class=\"flex items-center gap-1\"><i class=\"fas fa-calendar text-indigo-500 text-xs\"></i>Créé le {{ task ? formatDate(task.date) : '' }}</span>\n              <span v-if=\"task && task.modified !== task.date\" class=\"flex items-center gap-1\"><i class=\"fas fa-edit text-indigo-500 text-xs\"></i>Modifié le {{ formatDate(task.modified) }}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"flex flex-col gap-4 items-end\">\n          <label class=\"text-sm font-medium text-slate-600 flex items-center gap-2\">Statut:\n            <select v-model=\"currentStatus\" @change=\"updateStatus\" class=\"border rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-400\">\n              <option value=\"todo\">À faire</option>\n              <option value=\"in-progress\">En cours</option>\n              <option value=\"completed\">Terminé</option>\n            </select>\n          </label>\n          <button @click=\"closeModal\" class=\"text-slate-400 hover:text-red-500 transition text-2xl leading-none\"><i class=\"fas fa-times\"></i></button>\n        </div>\n      </div>\n\n      <!-- Body -->\n      <div class=\"flex-1 overflow-y-auto px-8 py-6 space-y-10\">\n        <!-- Description -->\n        <section class=\"space-y-4\">\n          <div class=\"flex items-center justify-between\">\n            <h3 class=\"text-lg font-semibold text-slate-800 flex items-center gap-2\"><i class=\"fas fa-align-left text-indigo-500\"></i>Description</h3>\n            <button v-if=\"!editingDescription\" @click=\"startEditingDescription\" class=\"border border-slate-300 rounded-lg px-4 py-2 text-sm text-indigo-600 hover:bg-indigo-600 hover:text-white transition\"><i class=\"fas fa-edit mr-1\"></i>Modifier</button>\n          </div>\n          <div v-if=\"!editingDescription\">\n            <div v-if=\"task && task.content && task.content.rendered\" v-html=\"task.content.rendered\" class=\"bg-white border border-indigo-100 border-l-4 border-l-indigo-400 rounded-lg p-5 leading-relaxed text-sm text-slate-700 shadow-sm\"></div>\n            <p v-else @click=\"startEditingDescription\" class=\"text-center text-slate-400 italic p-5 border-2 border-dashed rounded-lg cursor-pointer hover:border-indigo-400 hover:bg-slate-50 transition text-sm\"><i class=\"fas fa-plus mr-1\"></i>Ajouter une description...</p>\n          </div>\n          <div v-else class=\"space-y-3\">\n            <textarea v-model=\"editedDescription\" rows=\"4\" ref=\"descriptionTextarea\" placeholder=\"Décrivez cette tâche...\" class=\"w-full border-2 rounded-lg p-4 text-sm leading-relaxed focus:outline-none focus:border-indigo-500 resize-y min-h-[120px]\"></textarea>\n            <div class=\"flex gap-3\">\n              <button @click=\"saveDescription\" class=\"inline-flex items-center gap-2 rounded-lg bg-indigo-500 hover:bg-indigo-600 text-white px-5 py-2 text-sm font-medium shadow-sm\"><i class=\"fas fa-save\"></i>Sauvegarder</button>\n              <button @click=\"cancelDescriptionEdit\" class=\"inline-flex items-center gap-2 rounded-lg bg-slate-300 hover:bg-slate-400 text-slate-800 px-5 py-2 text-sm font-medium\"><i class=\"fas fa-times\"></i>Annuler</button>\n            </div>\n          </div>\n        </section>\n\n        <!-- Comments -->\n        <section class=\"space-y-6\">\n          <h3 class=\"text-lg font-semibold text-slate-800 flex items-center gap-2\"><i class=\"fas fa-comments text-indigo-500\"></i>Commentaires <span v-if=\"comments.length>0\" class=\"ml-1 inline-block bg-indigo-500 text-white text-xs px-2 py-0.5 rounded-full\">{{ comments.length }}</span></h3>\n          <div class=\"space-y-3\">\n            <div class=\"space-y-2\">\n              <textarea v-model=\"newComment\" rows=\"3\" @keydown.ctrl.enter=\"addComment\" placeholder=\"Écrire un commentaire...\" class=\"w-full border-2 border-slate-300 rounded-lg p-4 text-sm leading-relaxed focus:outline-none focus:border-indigo-500 resize-y\"></textarea>\n              <div class=\"flex items-center justify-between\">\n                <button @click=\"addComment\" :disabled=\"!newComment.trim() || !task\" class=\"inline-flex items-center gap-2 rounded-lg bg-indigo-500 hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed text-white px-4 py-2 text-sm font-medium shadow-sm\"><i class=\"fas fa-paper-plane\"></i>Envoyer</button>\n                <small class=\"text-slate-400 text-xs\">Ctrl + Entrée pour envoyer</small>\n              </div>\n            </div>\n            <div>\n              <div v-if=\"loadingComments\" class=\"text-center text-slate-400 py-10\"><i class=\"fas fa-spinner fa-spin text-xl mb-2 block\"></i>Chargement des commentaires...</div>\n              <div v-else-if=\"comments.length===0\" class=\"text-center text-slate-400 py-10\"><i class=\"fas fa-comment-slash text-xl mb-2 block\"></i>Aucun commentaire pour le moment</div>\n              <div v-else class=\"space-y-4\">\n                <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"rounded-lg border border-indigo-100 bg-slate-50 p-4\">\n                  <div class=\"flex items-start justify-between gap-4 mb-2\">\n                    <div class=\"flex items-center gap-2 text-slate-700 font-medium\"><i class=\"fas fa-user-circle text-indigo-500 text-lg\"></i>{{ comment.author_name || 'Utilisateur' }}</div>\n                    <div class=\"text-xs text-slate-400\">{{ formatDate(comment.date) }}</div>\n                    <div class=\"flex gap-1\">\n                      <button v-if=\"!comment.isEditing\" @click=\"startEditingComment(comment)\" title=\"Modifier\" class=\"p-2 text-indigo-500 hover:bg-indigo-50 rounded transition\"><i class=\"fas fa-edit\"></i></button>\n                      <button @click=\"deleteComment(comment.id)\" title=\"Supprimer\" class=\"p-2 text-red-500 hover:bg-red-50 rounded transition\"><i class=\"fas fa-trash\"></i></button>\n                    </div>\n                  </div>\n                  <div v-if=\"!comment.isEditing\" v-html=\"comment.content.rendered\" class=\"bg-white border border-slate-200 rounded-md p-3 text-sm leading-relaxed\"></div>\n                  <div v-else class=\"space-y-2\">\n                    <textarea v-model=\"comment.editedContent\" rows=\"3\" placeholder=\"Modifier votre commentaire...\" @keydown.ctrl.enter=\"saveCommentEdit(comment)\" @keydown.esc=\"cancelCommentEdit(comment)\" class=\"w-full border rounded-md p-3 text-sm focus:outline-none focus:border-indigo-500\"></textarea>\n                    <div class=\"flex justify-end gap-2\">\n                      <button @click=\"saveCommentEdit(comment)\" class=\"inline-flex items-center gap-2 rounded bg-indigo-500 hover:bg-indigo-600 text-white px-3 py-1.5 text-xs font-medium\"><i class=\"fas fa-save\"></i>Sauvegarder</button>\n                      <button @click=\"cancelCommentEdit(comment)\" class=\"inline-flex items-center gap-2 rounded bg-slate-300 hover:bg-slate-400 text-slate-800 px-3 py-1.5 text-xs font-medium\"><i class=\"fas fa-times\"></i>Annuler</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <!-- Footer -->\n      <div class=\"px-8 py-5 border-t border-gray-200 bg-slate-50 flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <button @click=\"deleteTask\" class=\"inline-flex items-center gap-2 rounded-lg bg-red-500 hover:bg-red-600 text-white px-5 py-2 text-sm font-medium shadow-sm\"><i class=\"fas fa-trash\"></i>Supprimer la tâche</button>\n        <div class=\"flex flex-col gap-1 text-xs text-slate-400\"><span>ID de la carte: {{ task ? task.id : '' }}</span><span class=\"text-indigo-500 font-medium\">Colonne: {{ categoryName }}</span></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport postService from '../services/postService.js';\nimport commentService from '../services/commentService.js';\nimport Swal from 'sweetalert2';\n\nexport default {\n  name: 'CardDetails',\n  props: {\n    isVisible: { type: Boolean, default: false },\n    task: { type: Object, required: false, default: null },\n    categoryName: { type: String, default: 'Catégorie inconnue' },\n  },\n  data() {\n    return {\n      editingTitle: false,\n      editingDescription: false,\n      editedTitle: '',\n      editedDescription: '',\n      currentStatus: 'todo',\n      comments: [],\n      newComment: '',\n      loadingComments: false,\n    };\n  },\n  computed: {\n    statusIcon() {\n      const icons = { todo: 'fas fa-inbox', 'in-progress': 'fas fa-clock', completed: 'fas fa-check-circle' };\n      return icons[this.currentStatus] || 'fas fa-inbox';\n    },\n  },\n  watch: {\n    isVisible: { immediate: true, handler(v) { if (v && this.task) this.initializeCard(); } },\n    task: { immediate: true, handler(n) { if (n && this.isVisible) this.initializeCard(); } },\n  },\n  methods: {\n    initializeCard() {\n      if (!this.task) return;\n      this.editedTitle = this.task.title?.rendered || '';\n      this.editedDescription = (this.task.content?.rendered || '').replace(/<[^>]*>/g, '');\n      this.currentStatus = this.getTaskStatus(this.task);\n      this.loadComments();\n    },\n    getTaskStatus(post) {\n      if (post.meta && post.meta.task_status) return post.meta.task_status;\n      if (post.status === 'draft') return 'todo';\n      if (post.status === 'pending') return 'in-progress';\n      if (post.status === 'publish') return 'completed';\n      return 'todo';\n    },\n    startEditingTitle() {\n      this.editingTitle = true;\n      this.$nextTick(() => { this.$refs.titleInput.focus(); this.$refs.titleInput.select(); });\n    },\n    async saveTitle() {\n      if (!this.task) return;\n      if (this.editedTitle.trim() && this.editedTitle !== this.task.title.rendered) {\n        try { await postService.update(this.task.id, { title: this.editedTitle.trim() }); this.$emit('task-updated', { ...this.task, title: { rendered: this.editedTitle.trim() } }); }\n        catch (e) { console.error('Erreur titre:', e); Swal.fire('Erreur', 'Impossible de mettre à jour le titre', 'error'); }\n      }\n      this.editingTitle = false;\n    },\n    cancelTitleEdit() { this.editedTitle = this.task?.title?.rendered || ''; this.editingTitle = false; },\n    startEditingDescription() { this.editingDescription = true; this.$nextTick(() => { this.$refs.descriptionTextarea.focus(); }); },\n    async saveDescription() {\n      if (!this.task) return;\n      try { const up = await postService.update(this.task.id, { content: this.editedDescription.trim() }); this.$emit('task-updated', up.data); }\n      catch (e) { console.error('Erreur description:', e); Swal.fire('Erreur', 'Impossible de mettre à jour la description', 'error'); }\n      this.editingDescription = false;\n    },\n    cancelDescriptionEdit() { this.editedDescription = this.task?.content?.rendered ? this.task.content.rendered.replace(/<[^>]*>/g, '') : ''; this.editingDescription = false; },\n    async updateStatus() {\n      if (!this.task) return;\n      try { await postService.update(this.task.id, { meta: { task_status: this.currentStatus } }); this.$emit('status-changed', this.currentStatus); }\n      catch (e) { console.error('Erreur statut:', e); Swal.fire('Erreur', 'Impossible de mettre à jour le statut', 'error'); }\n    },\n    async loadComments() {\n      if (!this.task) return; this.loadingComments = true;\n      try { const r = await commentService.getAll(this.task.id); this.comments = r.success ? r.data : []; }\n      catch (e) { console.error('Erreur chargement commentaires:', e); }\n      finally { this.loadingComments = false; }\n    },\n    async addComment() {\n      if (!this.newComment.trim() || !this.task) return;\n      try { const r = await commentService.create({ post: this.task.id, content: this.newComment.trim() }); if (r.success) { this.comments.push(r.data); this.newComment=''; } else throw new Error(r.error?.message||'Ajout impossible'); }\n      catch (e) { console.error('Erreur ajout commentaire:', e); Swal.fire('Erreur', \"Impossible d'ajouter le commentaire\", 'error'); }\n    },\n    async deleteComment(id) {\n      const res = await Swal.fire({ title:'Supprimer ce commentaire?', text:'Cette action ne peut pas être annulée', icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Supprimer', cancelButtonText:'Annuler' });\n      if(res.isConfirmed){\n        try { const r = await commentService.delete(id); if(r.success) this.comments = this.comments.filter(c=>c.id!==id); else throw new Error(r.error?.message||'Suppression impossible'); }\n        catch(e){ console.error('Erreur suppression commentaire:', e); Swal.fire('Erreur','Impossible de supprimer le commentaire','error'); }\n      }\n    },\n    startEditingComment(c){ c.editedContent = c.content.rendered.replace(/<[^>]*>/g,''); c.isEditing=true; this.$forceUpdate(); },\n    async saveCommentEdit(c){\n      if(!c.editedContent.trim()){ Swal.fire('Erreur','Le commentaire ne peut pas être vide','warning'); return; }\n      try { const r = await commentService.update(c.id,{ content: c.editedContent }); if(r.success){ c.content.rendered=r.data.content.rendered; c.isEditing=false; delete c.editedContent; this.$forceUpdate(); Swal.fire({ title:'Modifié !', text:'Commentaire mis à jour', icon:'success', timer:2000, showConfirmButton:false }); } else throw new Error(r.error?.message||'Modification impossible'); }\n      catch(e){ console.error('Erreur modif commentaire:', e); Swal.fire('Erreur','Impossible de modifier le commentaire','error'); }\n    },\n    cancelCommentEdit(c){ c.isEditing=false; delete c.editedContent; this.$forceUpdate(); },\n    async deleteTask(){\n      const res = await Swal.fire({ title:'Supprimer cette tâche?', text:'Cette action supprimera la tâche et tous ses commentaires', icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Supprimer définitivement', cancelButtonText:'Annuler' });\n      if(res.isConfirmed){\n        try { const r = await postService.delete(this.task.id); if(r.success){ this.$emit('task-deleted', this.task.id); this.closeModal(); } else throw new Error(r.error?.message||'Suppression impossible'); }\n        catch(e){ console.error('Erreur suppression tâche:', e); Swal.fire('Erreur','Impossible de supprimer la tâche','error'); }\n      }\n    },\n    closeModal(){ this.$emit('closeModal'); },\n    formatDate(d){ const date = new Date(d); return date.toLocaleDateString('fr-FR',{ day:'numeric', month:'long', year:'numeric', hour:'2-digit', minute:'2-digit'}); }\n  }\n};\n</script>\n\n<style scoped>\n@keyframes scaleIn { 0% { transform: scale(.9); opacity:0 } 100% { transform: scale(1); opacity:1 } }\n.animate-scaleIn { animation: scaleIn .25s ease-out }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}